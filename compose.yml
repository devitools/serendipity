services:
  app:
    container_name: serendipity-app
    image: devitools/hyperf:8.3-dev
    volumes:
      - ./:/opt/www
    environment:
      - SCAN_CACHEABLE=false
      - STDOUT_LOG_LEVEL=alert,critical,emergency,error,warning,notice,info,debug
      - SONAR_TOKEN=${SONAR_TOKEN:-undefined}
    entrypoint: [ 'tail', '-f', '/dev/null' ]
    networks:
      - serendipity-network
    restart: on-failure

  postgres:
    container_name: serendipity-postgres
    image: postgres:16.2
    tty: true
    environment:
      - POSTGRES_DB=${DB_POSTGRES_NAME:-database}
      - POSTGRES_USER=${DB_POSTGRES_USERNAME:-username}
      - POSTGRES_PASSWORD=${DB_POSTGRES_PASSWORD:-password}
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${DB_POSTGRES_USERNAME:-username} -d ${DB_POSTGRES_NAME:-database}'" ]
      interval: 10s
      timeout: 3s
      retries: 3
    volumes:
      - serendipity-postgres-data:/var/lib/postgresql/data
    networks:
      - serendipity-network

  mongo:
    container_name: serendipity-mongo
    image: mongo:6.0
    hostname: mongo
    command: --replSet rs0
    volumes:
      - serendipity-mongo-data:/data/db
    healthcheck:
      test: test $$(echo "rs.initiate().ok || rs.status().ok" | mongo -u user -p password --quiet) -eq 1
      interval: 10s
      start_period: 30s
    networks:
      - serendipity-network

  mongo-bootstrap:
    container_name: serendipity-mongo-bootstrap
    image: mongo:6.0
    command: /bin/sh -c "/scripts/bootstrap.sh"
    depends_on:
      - mongo
    volumes:
      - ./.docker/mongo/bootstrap.sh:/scripts/bootstrap.sh:ro
    networks:
      - serendipity-network

volumes:
  serendipity-postgres-data:
  serendipity-mongo-data:

networks:
  serendipity-network:
    name: serendipity-network
